library(readxl)
library(leaflet)
library(dplyr)
library(htmltools)
library(shiny)

#read in data----

d <-read_xlsx("massacres.xlsx")

#creating a map with one massare----

leaflet() %>%
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=-82.7, lat=27.6, popup="Napituca Massacre")

#add all massacres in data----


#use the massacre data file to add all masscres in the data set to the map
#using some basic html you can add some text and breaks to the pop up to make it a bit neater

leaflet(data = d[1:25,]) %>% addTiles() %>%
  addProviderTiles(providers$Esri.NatGeoWorldMap) %>%  
  addMarkers(lng=~longitude, lat=~latitude,
             popup = ~paste(massacre_name, "<br>", "Date:", date, 
                            "<br>", "Number of native casualties:", 
                            native_casualties,"<a href=",d$web,">",d$web) 
  )


#adding the map to shiny----


#create the UI

ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700", 
                 sidebarLayout(
                   sidebarPanel(
                     selectInput(inputId = "input1", label = "Name of Tribe" ,choices = 
                                   unique(d$Tribe_name))
                     
                   ),
                   
                   mainPanel(
                     leafletOutput("mymap"))
                 )
)}

server <- function(input, output) {
  react <- reactive({
    req(input$input1)
    df <- d[d$Tribe_name == input$input1]
    
  })
  
  output$mymap <- renderLeaflet({ 
    req(input$input1)
    leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
      addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
      addMarkers(lng=react()$longitude, lat=react()$latitude,
                 popup = paste(d$massacre_name, "<br>", "Date:", d$date, 
                               "<br>", "Number of native casualties:", 
                               native_casualties,"<a href=",d$web,">",d$web)
      )
  })
}


shinyApp(ui, server)