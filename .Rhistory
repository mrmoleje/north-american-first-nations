d <- data_frame(number = 1:4,
date = c(1600, 1700, 1800, 1900),
T_name = c("name1", "name2", "name3", "name4"))
d <- data_frame(number = 1:4,
date = c(1600, 1700, 1800, 1900),
T_name = c("name1", "name2", "name3", "name4"),
casualties= c(18, 89, 97, 34),
m_name= c("name1", "name2", "name3", "name4"))
d <- data_frame(number = 1:4,
date = c(1600, 1700, 1800, 1900),
T_name = c("name1", "name2", "name3", "name4"),
casualties= c(18, 89, 97, 34),
m_name= c("name1", "name2", "name3", "name4"))
d <- data_frame(number = 1:4,
date = c(1600, 1700, 1800, 1900),
T_name = c("name1", "name2", "name3", "name4"),
casualties= c(18, 89, 97, 34),
m_name= c("name1", "name2", "name3", "name4"))
ui <- {fluidPage("app title",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name" ,choices =
unique(d$T_name))
),
mainPanel(
leafletOutput("mymap"))
)
)}
server
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$T_name == input$input1 & d$colonialist_casualties]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name)
)
})
}
run app
shinyApp(ui, server)
runApp('workings.R')
rm(d)
library(readxl)
library(leaflet)
library(dplyr)
library(htmltools)
library(shiny)
#read in data----
d <-read_xlsx("massacres.xlsx")
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name))
),
mainPanel(
leafletOutput("mymap"))
)
)}
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name))
),
mainPanel(
leafletOutput("mymap"))
)
)}
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name)
)
})
}
shinyApp(ui, server)
library(readxl)
library(leaflet)
library(dplyr)
library(htmltools)
library(shiny)
#read in data----
d <-read_xlsx("massacres.xlsx")
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name))
),
mainPanel(
leafletOutput("mymap"))
)
)}
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
})
}
shinyApp(ui, server)
runApp('mass_map.R')
leaflet(data = d[1:25,]) %>% addTiles() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=~longitude, lat=~latitude,
popup = ~paste(massacre_name, "<br>", "Date:", date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name)),
selectizeInput(inputId = "year", label = "Year of Event",
choices = unique(d$date))
),
mainPanel(
leafletOutput("mymap"))
)
)}
server <- function(input, output) {
react <- reactive({
req(input$input1)
req(input$year)
df <- d[d$Tribe_name == input$input1 | d$date == input$year,]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(massacre_name, "<br>", "Date:", date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
req(input$year)
df <- d[d$Tribe_name == input$input1 | d$date == input$year,]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
d$native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
req(input$year)
df <- d[d$Tribe_name == input$input1 | d$date == input$year,]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
d$native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name)),
mainPanel(
leafletOutput("mymap"))
)
)}
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name)),
),
mainPanel(
leafletOutput("mymap"))
)
)}
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name)),
mainPanel(
leafletOutput("mymap"))
)
)}
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name)),
mainPanel(
leafletOutput("mymap"))
)
}
ui <- {fluidPage("Massacres in North America involving First Nations Peoples:1500-1700",
sidebarLayout(
sidebarPanel(
selectInput(inputId = "input1", label = "Name of Tribe" ,choices =
unique(d$Tribe_name))
),
mainPanel(
leafletOutput("mymap"))
)
)}
server <- function(input, output) {
react <- reactive({
req(input$input1)
req(input$year)
df <- d[d$Tribe_name == input$input1 | d$date == input$year,]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name == input$input1]
df
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name == input$input1]
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name == input$input1]
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name == input$input1]
})
output$mymap <- renderLeaflet({
req(input$input1)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)
)
})
}
shinyApp(ui, server)
runApp('workings.R')
runApp('workings.R')
runApp('workings.R')
library(shiny); runApp('workings.R')
runApp('mass_map.R')
library(readxl)
library(leaflet)
library(dplyr)
library(htmltools)
library(shiny)
#read in data----
d <-read_xlsx("massacres.xlsx")
runApp('mass_map.R')
runApp('workings.R')
runApp('workings.R')
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-82.7, lat=27.6, popup="Napituca Massacre")
ui <- fluidPage(
titlePanel("Title of my map"),
sidebarPanel(
sliderInput(inputId = "date", label = "Select date", min = 1500, max = 1700),
mainPanel(plotOutput("table"))
)
)
ui <- fluidPage(
titlePanel("Title of my map"),
sidebarPanel(
sliderInput(inputId = "date", label = "Select date", min = 1500, max = 1700, value = 10),
mainPanel(plotOutput("table"))
)
)
server <- function(input, output) {
output$id <- renderPlot({
table(d$massacre_name,d$date) }
server <- function(input, output) {
output$id <- renderPlot({
table(d$massacre_name,d$date) }
server <- function(input, output) {
output$id <- renderPlot({
table(d$massacre_name,d$date) }
)
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
req(input$input1)
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
server <- function(input, output) {
req(input$date)
output$mymap <- renderLeaflet({
req(input$date)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d }
)
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d }
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d }
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d[d$date == input$date] })
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d[d$date == input$date]
df
})
server <- function(input, output) {
react <- reactive({
req(input$input1)
df <- d[d$Tribe_name == input$input1]
})
server <- function(input, output) {
react <- reactive({
req(input$input1)
req(input$year)
df <- d[d$Tribe_name == input$input1 | d$date == input$year,]
df
})
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d[d$date == input$date]
df
})
output$mymap <- renderLeaflet({
req(input$date)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Title of my map"),
sidebarPanel(
sliderInput(inputId = "date", label = "Select date", min = 1500, max = 1700, value = 10),
mainPanel(leafletOutput("mymap"))
)
)
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d[d$date == input$date]
df
})
output$mymap <- renderLeaflet({
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("Title of my map"),
sidebarPanel(
sliderInput(inputId = "date", label = "Select date", min = 1500, max = 1700, value = 10),
mainPanel(leafletOutput("mymap"))
)
)
server <- function(input, output) {
react <- reactive({
req(input$date)
df <- d[d$date == input$date]
df
})
output$mymap <- renderLeaflet({
req(input$date)
leaflet() %>% addTiles() %>% setView(lng = -100.94, lat = 38.94 , zoom = 3.5) %>%
addProviderTiles(providers$Esri.NatGeoWorldMap) %>%
addMarkers(lng=react()$longitude, lat=react()$latitude,
popup = paste(d$massacre_name, "<br>", "Date:", d$date,
"<br>", "Number of native casualties:",
native_casualties,"<a href=",d$web,">",d$web)) }
)
}
shinyApp(ui = ui, server = server)
